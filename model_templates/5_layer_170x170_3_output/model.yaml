!obj:pylearn2.train.Train {
    dataset: &train !obj:datasets.rgbd_c01b_dataset.get_dataset {
        which_set: 'c01b_train',
        dataset_filepath: %(dataset)s,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: %(batch_size)i,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [170,170],
            num_channels: 4,
            axes: ['c', 0, 1, 'b'],
        },
        layers: [!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h0',
                     output_channels: %(output_channels_h0)i,
                     irange: .05,
                     kernel_shape: [11, 11],
                     kernel_stride: [4,4],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h1',
                     output_channels: %(output_channels_h1)i,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h2',
                     output_channels: %(output_channels_h2)i,
                     irange: .05,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     max_kernel_norm: 1.9365
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h3',
                     output_channels: %(output_channels_h3)i,
                     irange: .05,
                     kernel_shape: [3, 3],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     max_kernel_norm: 1.9365
                 },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h4',
                     output_channels: %(output_channels_h4)i,
                     irange: .05,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 },
                 !obj:pylearn2.models.mlp.Linear {
                    layer_name: 'y',
                    dim: 3,
                    sparse_init: 15
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i,
        learning_rate: .0000001,
        batches_per_iter: 4,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        monitoring_dataset:
            {
                'valid' : !obj:datasets.rgbd_c01b_dataset.get_dataset {
                              which_set: 'c01b_valid',
                              dataset_filepath: %(dataset)s,
                          },
                'test'  : !obj:datasets.rgbd_c01b_dataset.get_dataset {
                              which_set: 'c01b_test',
                              dataset_filepath: %(dataset)s,
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.cost.MethodCost {
                    method: 'cost_from_X'
                }, !obj:pylearn2.costs.mlp.WeightDecay {
                        coeffs: [ .00005, .00005, .00005, .00005, .00005, .00005 ]
                }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                },
            ]
        },
    },
    extensions:
        [!obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_objective',
             save_path: "%(save_path)s/cnn_model.pkl"
        },!obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 1000,
            final_momentum: .9
        }
    ]
}
